//Add arguments for new recombination rates and window ends (done)
//Switch to recombination rate input from file (done)
//Switch to argument input from text file (done)
//figure out how to set global definitions, e.g. to avoid reading in recombination rate map redundantly (later)
//integrate remaining functions:
	//population sizes
	//population split/colonization timing
	//mutation rate specification

// Testing -- 3 windows
// 2 scenarios -- H, L, H --> L, H, L
// H, 0, H --> 0, H, 0

// for each, simulate a population of 500 individuals, 15Kb region. 
// collect crossovers occuring in 1 generation before change and 1 generation after change. Compare distribution of CO counts to expectation from rates
// Looks good

// Usage: slim -d "args=[argfile_path]" slim_recomEvol.slim

// Old Usage: slim -d "outpre=[output_prefix]" -d "rec_map_path=[comma-sep rec rates]" -d "new_rec_map_path=[comma-sep new rec rates]" slim_recomEvol.slim

// Old Usage: slim -d "outpre=[output_prefix]" -d "recombination_rates=[comma-sep rec rates]" -d "window_ends=[comma-sep rec rate window ends] -d "new_recombination_rates=[comma-sep new rec rates]" -d "new_window_ends=[comma-sep new window ends]" slim_recomEvol.slim

initialize(){
	lines = readFile(args);
	for(line in lines){
		line = strsplit(line, '=');
		if(line[0] == 'outpre'){
			outpre = line[1];
		}
		else if(line[1] == 'burnin'){
			burnin = asInteger(line[1]);
		}
		else if(line[0] == 'rec_map_path'){
			rec_map_path = line[1];
		}
		else if(line[0] == 'new_rec_map_path'){
			new_rec_map_path = line[1];
		}
		else if(line[0] == 'mut_rate'){
			mut_rate = asFloat(line[1]);
		}
		else if(line[0] == 'colonization_time'){
			colonization_time = asInteger(line[1]);
		}
		else if(line[0] == 'mainland_Ne'){
			mainland_Ne = asInteger(line[1]);
		}
		else if(line[0] == 'island_Ne'){
			island_Ne = asInteger(line[1]);
		}
		else if(line[0] == 'bottleneck_Ne'){
			bottleneck_Ne == asInteger(line[1]);
		}
		else if(line[0] == 'growth_rate'){
			growth_rate == asFloat(line[1]);
		}
	}
	
	initializeMutationRate(mut_rate);
	initializeMutationType('m1', 0.5, 'f', 0.0);
	initializeGenomicElementType('g1', m1, 1.0);
	initializeGenomicElement(g1, 0, 14999);
	lines = readFile(rec_map_path);
	rates = NULL;
	ends = NULL;
	for(line in lines){
		line = strsplit(line, '\t');
		ends = c(ends, asInteger(line[0]));
		rates = c(rates, asFloat(line[1]));
	}
	initializeRecombinationRate(rates = rates, ends = ends);
	writeFile(filePath = paste(c(outpre, '_CObreakpoints_prechange.txt'), sep = ''), contents = 'breakpoint_count');
	writeFile(filePath = paste(c(outpre, '_CObreakpoints_postchange.txt'), sep = ''), contents = 'breakpoint_count');
}


// Initialize mainland populatoin
1{
	sim.addSubpop('mainland', mainland_Ne);
} 

2 recombination(){
	// get outpre again
	lines = readFile(args);
	for(line in lines){
		line = strsplit(line, '=');
		if(line[0] == 'outpre'){
			outpre = line[1];
			break;
		}
	}
	writeFile(filePath = paste(c(outpre, '_CObreakpoints_prechange.txt'), sep = ''), contents = asString(breakpoints), append = T);
	return T;
}

// split populations after burnin
burnin{
	sim.addSubpopSplit('island', bottleneck_Ne, mainland)
}

// change recombination landscape in island at time of colonization
burnin: recombination(island){
	lines = readFile(new_rec_map_path);
	new_rates = NULL;
	new_ends = NULL;
	for(line in lines){
		line = strsplit(line, '\t');
		new_ends = c(new_ends, asInteger(line[0]));
		new_rates = c(new_rates, asFloat(line[1]));
	}
	// vector of new recombination rates
	//new_rates = asFloat(strsplit(new_recombination_rates, sep = ','));
	// vector of end positions	(same as original)
	//new_ends = sim.chromosome.recombinationEndPositions;
	// vector of start positions (same as original -- not sure that I need this)
	new_starts = c(0, new_ends[0:(length(new_ends) - 2)] + 1);
	// original vector of recombination rates
	rates = sim.chromosome.recombinationRates;
	// original vector of end positions (now, same as new_ends)
	ends = new_ends;
	// original vector of chromosome start postitions (now, same as new_starts)
	starts = c(0, ends[0:(length(ends) - 2)] + 1);
	// vector of recombination rate differences -- use this to decide whether to add or remove crossovers
	rate_diff = new_rates - rates;
	// window size -- use end of first window
	win_size = ends[0] + 1;
	// iterating over windows
	for(win in 0:(length(rates) - 1)){
		// if new rate < old rate
		if(rate_diff[win] < 0){
			// remove crossovers with pois(lambda = abs(rate_diff) * win_size)
			// collect breakpoints within window
			win_breaks = breakpoints[which(breakpoints >= starts[win] & breakpoints <= ends[win])];
			// determine number of crossovers to remove
			// if new rate zero, remove all
			if(new_rates[win] == 0){
				num_remove = length(win_breaks);
			}
			// if new rate > 0, poisson rv
			else if(new_rates[win] > 0){
				num_remove = rpois(1, abs(rate_diff[win]) * win_size);
				// cap num_remove at the number of breaks within the window
				if(num_remove > length(win_breaks)){
					num_remove = length(win_breaks);
				}
			}
			// randomly select a number of positions = num_remove to remove
			COs_remove = sample(win_breaks, num_remove);
			// remove these from breakpoints
			for(i in COs_remove){
				breakpoints = breakpoints[breakpoints != i];
			}					
		}
		// if the new rate is higher than the old rate		
		else if(rate_diff[win] > 0){
			// add crossovers with prob = abs(rate_diff)
			// note -- under this condition, the new rate is always > 0
			num_add = rpois(1, rate_diff[win] * win_size);
			// randomly select num_add positions to add
			CO_add = rdunif(num_add, min = starts[win], max = ends[win]);
			// add to breakpoints
			breakpoints = c(breakpoints, CO_add);
			// sort breakpoints, maybe unnecessary
			breakpoints = sort(breakpoints);
			//check for duplicates
			while(length(breakpoints) > length(unique(breakpoints))){
				//get number of breakpoints to re-draw
				num_redraw = length(breakpoints) - length(unique(breakpoints));
				//re-draw breakpoints
				CO_redraw = rdunif(num_redraw, min = starts[win], max = ends[win]);
				//cat to breakpoints
				breakpoints = c(unique(breakpoints), CO_redraw);
				//re-sort
				breakpoints = sort(breakpoints);
			}
		}
		// if there is no difference in rate
		else if(rate_diff[win] == 0){
			// do nothing. this conditional is unnecesary
			next;
		}
	}
	return T;
}

11 recombination(){
	// get outpre again
	lines = readFile(args);
	for(line in lines){
		line = strsplit(line, '=');
		if(line[0] == 'outpre'){
			outpre = line[1];
			break;
		}
	}
	writeFile(filePath = paste(c(outpre, '_CObreakpoints_postchange.txt'), sep = ''), contents = asString(breakpoints), append = T);
	return T;
}

//ADD EXPONENTIAL GROWTH FROM BOTTLENECK_NE TO ISLAND_NE AT GROWTH_RATE

// after colonization_time generations, output a vcf for each population
burnin + colonization_time	late(){
	;
}